// Package {{.PackageName}} allows for an external config file to be read that allows for
// value to be overriden based on a hostname derived configuration set.
//
// the Configuration type defines all the configurable parameters.
// the config file is json, its consists of 3 sections
//
// defaults   : a Configuration instance that is the base/default configurations
// hosts      : a mapping from host name to a named configuration [e.g. node1 : "aws"]
// overrrides : a set of named Configuration instances that can override the some or all of the default config values
//
// the caller can provide a specific hostname if it chooses, otherwise the config will
//  a) look for a named environemnt variable, if set to something, that is used
//  b) look at the OS supplied hostname
//
//
// *** THIS IS GENERATED CODE: DO NOT EDIT ***
package {{.PackageName}}

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// Duration represents a period of time, its the same as time.Duration
// but supports better marshalling from json
type Duration time.Duration

// UnmarshalJSON handles decoding our custom json serialization for Durations
// json values that are numbers are treated as seconds
// json values that are strings, can use the standard time.Duration units indicators
// e.g. this can decode val:100 as well as val:"10m"
func (d *Duration) UnmarshalJSON(b []byte) error {
	if b[0] == '"' {
		dir, err := time.ParseDuration(string(b[1 : len(b)-1]))
		*d = Duration(dir)
		return err
	}
	i, err := json.Number(string(b)).Int64()
	*d = Duration(time.Duration(i) * time.Second)
	return err
}

// MarshalJSON encodes our custom Duration value as a quoted version of its underlying value's String() output
// this means you get a duration with a trailing units indicator, e.g. "10m0s"
func (d Duration) MarshalJSON() ([]byte, error) {
	return []byte(`"` + d.String() + `"`), nil
}

// String returns a string formatted version of the duration in a valueUnits format, e.g. 5m0s for 5 minutes
func (d Duration) String() string {
	return time.Duration(d).String()
}

// TimeDuration returns this duration in a time.Duration type
func (d Duration) TimeDuration() time.Duration {
	return time.Duration(d)
}

{{ range $n, $t := .Structs }}
	{{$t.PrefixedComment}}
	type {{$n}} struct {
		{{range $f := $t.Fields}}
		{{$f.PrefixedComment}}
		{{$f.Name}} {{$f.GoType.Name}}
		{{end}}
	}

	func (c *{{$n}}) overrideFrom(o *{{$n}}) {
		{{range $f := .Fields}}{{$f.OverrideImpl}}
	    {{end}}
	}

    {{if $t.WithGetter}}{{$t.GettersImpl}}{{end}}
{{end}}

{{range $t := .BaseTypes}}
	func {{$t.OverrideFunc}}(d, o *{{$t.Name}}) {
		if {{ $t.OverrideExpr }} {
			*d = *o
		}
	}
{{end}}

// Load will attempt to load the configuration from the supplied filename.
// Overrides defined in the config file will be applied based on the hostname
// the hostname used is dervied from [in order]
//    1) the hostnameOverride parameter if not ""
//    2) the value of the Environment variable in envKeyName, if not ""
//    3) the OS supplied hostname
func Load(configFilename, envKeyName, hostnameOverride string) (*Configuration, error) {
	configs, err := LoadConfigurations(configFilename)
	if err != nil {
		return nil, err
	}
	return configs.For(envKeyName, hostnameOverride)
}

// LoadConfigurations decodes the json config file, or returns an error
// typically you'd just use Load, but this can be useful if you need to
// do more intricate examination of the entire set of configurations
func LoadConfigurations(filename string) (*Configurations, error) {
	configs := new(Configurations)
	err := loadJSON(filename, configs)
	if err != nil {
		return nil, err
	}
	if configs.Overrides == nil {
		configs.Overrides = map[string]Configuration{}
	}

	loadedcache := map[string]bool{}
	for _, override := range configs.Hosts {
		if strings.HasPrefix(override, "file://") && !loadedcache[override] {
			// mark as loaded
			loadedcache[override] = true

			fn, err := resolveOverrideConfigFile(override[7:], filename)
			if err != nil {
				return nil, err
			}

			config := new(Configuration)
			err = loadJSON(fn, config)
			if err != nil {
				return nil, err
			}

			configs.Overrides[override] = *config
		}
	}

	return configs, nil
}

func loadJSON(filename string, v interface{}) error {
	f, err := os.Open(filename)
	if err != nil {
		return err
	}
	defer f.Close()
	return json.NewDecoder(f).Decode(v)
}

func resolveOverrideConfigFile(configFile, baseConfigFile string) (string, error) {
	if !filepath.IsAbs(configFile) {
		// if relative file not found, try to resolve it as relative to the base config file
		if _, err := os.Stat(configFile); os.IsNotExist(err) {
			baseDir := filepath.Dir(baseConfigFile)
			configFile = filepath.Join(baseDir, configFile)
		}
	}

	return configFile, nil
}

// Configurations is the entire set of configurations, these consist of
//    a base/default configuration
//    a set of hostname -> named overrides
//    named overrides -> config overrides
type Configurations struct {
	// Default contains the base configuration, this applies unless it override by a specifc named config
	Defaults Configuration

	// a map of hostname to named configuration
	Hosts map[string]string

	// a map of named configuration overrides,
	// if starts with file:// prefix, then external file will be loaded
	Overrides map[string]Configuration
}

// HostSelection describes the hostname & override set that were used
type HostSelection struct {
	// Hostname returns the hostname from the configuration that was used
	// this may return a fully qualified hostname, when just a name was specified
	Hostname string
	// Override contains the name of the override section, if there was one found
	// [based on the Hostname]
	Override string
}

// For returns the Configuration for the indicated host, with all the overrides applied.
// the hostname used is dervied from [in order]
//    1) the hostnameOverride parameter if not ""
//    2) the value of the Environemnt variable in envKeyName, if not ""
//    3) the OS supplied hostname
func (configs *Configurations) For(envKeyName, hostnameOverride string) (*Configuration, error) {
	sel, err := configs.Selection(envKeyName, hostnameOverride)
	if err != nil {
		return nil, err
	}
	c := configs.Defaults
	if sel.Override != "" {
		overrides := configs.Overrides[sel.Override]
		c.overrideFrom(&overrides)
	}
	return &c, nil
}

// Selection returns the final resolved hostname, and if applicable,
// override section name for the supplied host specifiers
func (configs *Configurations) Selection(envKeyName, hostnameOverride string) (HostSelection, error) {
	res := HostSelection{}
	hn, err:= configs.resolveHostname(envKeyName, hostnameOverride)
	if err != nil {
		return res, err
	}
	res.Hostname = hn
	if ov, exists := configs.Hosts[hn]; exists {
		if _, exists := configs.Overrides[ov]; !exists {
			return res, fmt.Errorf("Configuration for host %s specified override set %s but that doesn't exist", hn, ov)
		}
		res.Override = ov
	}
	return res, nil
}

// resolveHostname determines the hostname to lookup in the config to see if
// there's an override set we should apply
// the hostname used is dervied from [in order]
//    1) the hostnameOverride parameter if not ""
//    2) the value of the Environemnt variable in envKeyName, if not ""
//    3) the OS supplied hostname
// if the supplied hostname doesn't exist and is not a fully qualified name
// and there's an entry in hosts that is fully qualified, that'll be returned
func (configs *Configurations)resolveHostname(envKeyName, hostnameOverride string) (string, error) {
	var err error
	hn := hostnameOverride
	if hn == "" {
		if envKeyName != "" {
			hn = os.Getenv(envKeyName)
		}
		if hn == "" {
			if hn, err = os.Hostname(); err != nil {
				return "", err
			}
		}
	}
	if _, exists := configs.Hosts[hn]; !exists {
		// resolved host name doesn't appear in the Hosts section, see if
		// host is not fully qualified, and see if there's a FQ version
		// in the host list.
		if strings.Index(hn,".") == -1 {
			// no quick way to do this, other than to trawl through them all
			qualhn := hn + "."
			for k := range configs.Hosts {
				if strings.HasPrefix(k, qualhn) {
					return k, nil
				}
			}
		}
	}
	return hn, nil
}
